if !has('gui_running') && &term =~ '^\%(screen\|tmux\|xterm\|Terminal\)'
  " Use 256 colors
  set t_Co=256
  
  " For gruvbox specifically
  let g:gruvbox_termcolors=256
endif

let mapleader = "\\"

" Prevent buffers from opening in NERDTree window
autocmd BufEnter * if bufname('#') =~ 'NERD_tree' && bufname('%') !~ 'NERD_tree' && winnr('$') > 1 | 
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif

" Plugins
call plug#begin('~/.local/share/nvim/plugged')

" File navigation
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'

" Ruby/Rails specific
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'

" Testing
Plug 'vim-test/vim-test'

" Git integration
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Code completion and snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rafamadriz/friendly-snippets'

" Linting and formatting
Plug 'dense-analysis/ale'

" Appearance
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'NLKNguyen/papercolor-theme'

" Editing enhancements
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'

call plug#end()

" Basic settings
syntax on
set number
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent
set hidden
set incsearch
set hlsearch
set ignorecase
set smartcase
set clipboard=unnamed
set backspace=indent,eol,start
set scrolloff=8
set updatetime=300
set signcolumn=yes

" Theme
set background=dark
colorscheme gruvbox

" Airline config
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1

" NERDTree config
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1

" FZF config
nnoremap <leader>f :Files<CR>
nnoremap <leader>g :GFiles<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>r :Rg<CR>

" Rails navigation shortcuts
nnoremap <leader>ec :Econtroller<CR>
nnoremap <leader>em :Emodel<CR>
nnoremap <leader>ev :Eview<CR>
nnoremap <leader>eh :Ehelper<CR>
nnoremap <leader>et :Etest<CR>

" vim-test mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" ALE config
let g:ale_linters = {
\   'ruby': ['rubocop'],
\}
let g:ale_fixers = {
\   'ruby': ['rubocop'],
\}
" let g:ale_fix_on_save = 1

" COC config for Ruby
let g:coc_global_extensions = [
  \ 'coc-solargraph',
  \ 'coc-snippets',
  \ 'coc-json',
  \ ]

" Use tab for trigger completion with characters ahead and navigate
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Splitting
set splitbelow
set splitright
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Neovim specific settings
set inccommand=split  " Shows live preview of substitutions

" Terminal Function
let g:term_buf = 0
let g:term_win = 0
function! TermToggle(height)
  if win_gotoid(g:term_win)
    hide
  else
    botright new
    exec "resize " . a:height
    try
      exec "buffer " . g:term_buf
    catch
      call termopen($SHELL, {"detach": 0})
      let g:term_buf = bufnr("")
      set nonumber
      set norelativenumber
      set signcolumn=no
    endtry
    startinsert!
    let g:term_win = win_getid()
  endif
endfunction

" Toggle terminal on/off (neovim)
nnoremap <leader>tt :call TermToggle(12)<CR>
inoremap <leader>tt <Esc>:call TermToggle(12)<CR>
tnoremap <leader>tt <C-\><C-n>:call TermToggle(12)<CR>
" nnoremap <A-t> :call TermToggle(12)<CR>
" inoremap <A-t> <Esc>:call TermToggle(12)<CR>
" tnoremap <A-t> <C-\><C-n>:call TermToggle(12)<CR>

" Terminal go back to normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap :q! <C-\><C-n>:q!<CR>
